/**
 * @generated-from ./$group.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars,import/no-duplicates,no-constant-condition */

import { asyncGroup, asyncToArray } from '../../..';
import { asyncUnwrapDeep as asyncUw } from '../../../__tests__/async-helpers';
describe('asyncGroup', () => {
  it('main cursor', async () => {
    const iter = asyncGroup('AAABBAACCCCD');
    expect(await asyncUw(iter)).toEqual([
      ['A', ['A', 'A', 'A']],
      ['B', ['B', 'B']],
      ['A', ['A', 'A']],
      ['C', ['C', 'C', 'C', 'C']],
      ['D', ['D']],
    ]);
  });
  it('secondary (consume partially)', async () => {
    const iter = asyncGroup('AAABBAACCCCD');
    let next = await iter.next();
    expect(next.value[0]).toBe('A');
    expect((await next.value[1].next()).value).toBe('A');
    expect((await next.value[1].next()).value).toBe('A');
    expect((await next.value[1].next()).value).toBe('A');
    expect((await next.value[1].next()).done).toBe(true);
    next = await iter.next();
    expect(next.value[0]).toBe('B');
    next = await iter.next();
    expect(next.value[0]).toBe('A');
  });
  it('returns grouped keys', async () => {
    const iter = asyncGroup('AAABBAACCCCD');
    expect(await asyncUw(iter)).toEqual(['A', 'B', 'A', 'C', 'D']);
  });
  it('returns grouped values', async () => {
    const iter = asyncGroup('AAABBAACCCCD');
    expect(await asyncUw(iter)).toEqual([
      ['A', 'A', 'A'],
      ['B', 'B'],
      ['A', 'A'],
      ['C', 'C', 'C', 'C'],
      ['D'],
    ]);
  });
  it('returns grouped entries', async () => {
    const iter = asyncGroup('AAABBAACCCCD');
    expect(await asyncUw(iter)).toEqual([
      ['A', ['A', 'A', 'A']],
      ['B', ['B', 'B']],
      ['A', ['A', 'A']],
      ['C', ['C', 'C', 'C', 'C']],
      ['D', ['D']],
    ]);
  });
  it('grouping an empty iterable returns empty iterable', async () => {
    expect(await asyncToArray(asyncGroup(null))).toEqual([]);
    expect(await asyncToArray(asyncGroup(undefined))).toEqual([]);
  });
});

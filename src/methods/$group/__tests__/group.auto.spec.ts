/**
 * @generated-from ./group.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { group, toArray } from '../../..';
import { unwrapDeep as uw } from '../../../__tests__/helpers';
describe('group', () => {
  it('main cursor', () => {
    const iter = group('AAABBAACCCCD');
    expect(uw(iter)).toEqual([
      ['A', ['A', 'A', 'A']],
      ['B', ['B', 'B']],
      ['A', ['A', 'A']],
      ['C', ['C', 'C', 'C', 'C']],
      ['D', ['D']],
    ]);
  });
  it('secondary (consume partially)', () => {
    const iter = group('AAABBAACCCCD');
    let next = iter.next();
    expect(next.value[0]).toBe('A');
    expect(next.value[1].next().value).toBe('A');
    expect(next.value[1].next().value).toBe('A');
    expect(next.value[1].next().value).toBe('A');
    expect(next.value[1].next().done).toBe(true);
    next = iter.next();
    expect(next.value[0]).toBe('B');
    next = iter.next();
    expect(next.value[0]).toBe('A');
  });
  it('returns grouped keys', () => {
    const iter = group('AAABBAACCCCD');
    expect(uw(iter)).toEqual(['A', 'B', 'A', 'C', 'D']);
  });
  it('returns grouped values', () => {
    const iter = group('AAABBAACCCCD');
    expect(uw(iter)).toEqual([
      ['A', 'A', 'A'],
      ['B', 'B'],
      ['A', 'A'],
      ['C', 'C', 'C', 'C'],
      ['D'],
    ]);
  });
  it('returns grouped entries', () => {
    const iter = group('AAABBAACCCCD');
    expect(uw(iter)).toEqual([
      ['A', ['A', 'A', 'A']],
      ['B', ['B', 'B']],
      ['A', ['A', 'A']],
      ['C', ['C', 'C', 'C', 'C']],
      ['D', ['D']],
    ]);
  });
  it('grouping an empty iterable returns empty iterable', () => {
    expect(toArray(group(null))).toEqual([]);
    expect(toArray(group(undefined))).toEqual([]);
  });
  it('groups using destructuring', () => {
    const [group1, group2, group3] = group('AAABBCCCC');
    expect(group1[0]).toBe('A');
    expect(group2[0]).toBe('B');
    expect(group3[0]).toBe('C');
    expect(toArray(group1[1])).toEqual(['A', 'A', 'A']);
    expect(toArray(group2[1])).toEqual(['B', 'B']);
    expect(toArray(group3[1])).toEqual(['C', 'C', 'C', 'C']);
  });
});
